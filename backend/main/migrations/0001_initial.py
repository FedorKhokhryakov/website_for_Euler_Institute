# Generated by Django 5.2.6 on 2025-09-13 14:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('middle_name', models.CharField(blank=True, max_length=150, verbose_name='отчество')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('laboratory', models.CharField(blank=True, max_length=100, verbose_name='Лаборатория')),
                ('year_of_birth', models.IntegerField(blank=True, null=True, verbose_name='Год рождения')),
                ('year_of_graduation', models.IntegerField(blank=True, null=True, verbose_name='Год окончания вуза')),
                ('academic_degree', models.CharField(blank=True, max_length=100, verbose_name='Ученая степень')),
                ('year_of_degree', models.IntegerField(blank=True, null=True, verbose_name='Год получения степени')),
                ('status', models.CharField(blank=True, max_length=100, verbose_name='Статус')),
                ('position', models.CharField(blank=True, max_length=100, verbose_name='Должность')),
                ('title', models.CharField(blank=True, max_length=100, verbose_name='Звание')),
                ('fte', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, verbose_name='Ставка')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Администратор')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, verbose_name='Название')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('authors_string', models.CharField(blank=True, max_length=255, verbose_name='Авторы')),
                ('type', models.CharField(choices=[('publication', 'Публикация'), ('monograph', 'Монография'), ('reports', 'Доклад'), ('lectures', 'Курс лекций'), ('patents', 'Патент'), ('supervision', 'Научное руководство'), ('editing', 'Редактирование научных изданий'), ('editorial_board', 'Работа в ред. коллегии'), ('org_work', 'Научно-организационная работа'), ('opposition', 'Оппонирование'), ('grants', 'Грант'), ('awards', 'Награда')], max_length=50, verbose_name='Тип поста')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL, verbose_name='Создатель поста')),
            ],
            options={
                'verbose_name': 'Публикация',
                'verbose_name_plural': 'Публикации',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Patent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=50)),
                ('date_registered', models.DateField()),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='patent', to='main.post')),
            ],
        ),
        migrations.CreateModel(
            name='OrgWork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.CharField(max_length=255)),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='org_work', to='main.post')),
            ],
        ),
        migrations.CreateModel(
            name='Opposition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('thesis_title', models.CharField(max_length=255)),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='opposition', to='main.post')),
            ],
        ),
        migrations.CreateModel(
            name='Monograph',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publisher', models.CharField(max_length=255)),
                ('pages', models.PositiveIntegerField()),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='monograph', to='main.post')),
            ],
        ),
        migrations.CreateModel(
            name='Lecture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_name', models.CharField(max_length=255)),
                ('semester', models.CharField(max_length=50)),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lecture', to='main.post')),
            ],
        ),
        migrations.CreateModel(
            name='Grant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fund_name', models.CharField(max_length=255)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='grant', to='main.post')),
            ],
        ),
        migrations.CreateModel(
            name='EditorialBoard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('journal', models.CharField(max_length=255)),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='editorial_board', to='main.post')),
            ],
        ),
        migrations.CreateModel(
            name='Editing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('edition_name', models.CharField(max_length=255)),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='editing', to='main.post')),
            ],
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('award_name', models.CharField(max_length=255)),
                ('year', models.PositiveIntegerField()),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='award', to='main.post')),
            ],
        ),
        migrations.CreateModel(
            name='Presentation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conference', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='Presentation', to='main.post')),
            ],
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('journal', models.CharField(max_length=255)),
                ('year', models.PositiveIntegerField()),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='publication', to='main.post')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(verbose_name='Год отчета')),
                ('report_type', models.CharField(blank=True, choices=[('annual_user', 'Годовой отчет пользователя'), ('annual_lab', 'Годовой отчет лаборатории'), ('custom', 'Произвольный отчет')], max_length=20, null=True, verbose_name='Тип отчета')),
                ('format', models.CharField(choices=[('rtf', 'RTF'), ('pdf', 'PDF'), ('docx', 'DOCX')], default='rtf', max_length=10, verbose_name='Формат')),
                ('status', models.CharField(choices=[('pending', 'В обработке'), ('processing', 'Формируется'), ('completed', 'Завершен'), ('failed', 'Ошибка')], default='pending', max_length=20, verbose_name='Статус')),
                ('name', models.CharField(max_length=255, verbose_name='Название отчета')),
                ('file_path', models.CharField(blank=True, max_length=500, null=True, verbose_name='Путь к файлу')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлен')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_reports', to=settings.AUTH_USER_MODEL, verbose_name='Создатель отчета')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Отчет',
                'verbose_name_plural': 'Отчеты',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Supervision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_name', models.CharField(max_length=255)),
                ('topic', models.CharField(max_length=255)),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='supervision', to='main.post')),
            ],
        ),
        migrations.CreateModel(
            name='PostAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0, verbose_name='Порядок автора')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authors', to='main.post', verbose_name='Публикация')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_authors', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
            options={
                'verbose_name': 'Автор публикации',
                'verbose_name_plural': 'Авторы публикаций',
                'ordering': ['order'],
                'unique_together': {('post', 'user')},
            },
        ),
    ]
